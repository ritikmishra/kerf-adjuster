{"version":3,"sources":["app/components/placeholder-offset/placeholder-offset.tsx","app/components/dxf-editor/dxf-editor.tsx","app/components/dxf-display-area/dxf-display-area.tsx","app/components/navbar/navbar.tsx","app/App.tsx","serviceWorker.ts","index.tsx"],"names":["PlaceholderOffsetUI","useState","kerfThickness","setKerfThickness","undefined","file","setFile","downloadFile","a","alert","offset_drawing","new_drawing","Buffer","from","new_drawing_data_uri","toString","download_link","document","createElement","setAttribute","newFileName","fileName","replace","innerHTML","confirm","body","appendChild","click","removeChild","className","onNewFile","type","value","step","onChange","event","Number","target","variant","disabled","onClick","FilePicker","handleFileChange","files","length","arrayBuffer","fileContents","fileBuffer","alloc","byteLength","fill","Uint8Array","name","accept","ThreeJsObjects","scene","camera","renderer","plane","width","height","orbitControls","this","render","scaleFactor","DxfDisplayArea","props","paneRef","createRef","threeJsObjects","setThreeJsObjects","useEffect","domRef","THREE","window","innerHeight","innerWidth","position","z","setSize","current","domElement","OrbitControls","enableRotate","mouseButtons","LEFT","PAN","MIDDLE","DOLLY","RIGHT","ROTATE","ret","animate","requestAnimationFrame","initThreeJs","geometry","translate","geometry2","material","color","cube","add","handleResize","left","right","top","bottom","updateProjectionMatrix","addEventListener","ref","CustomNavbar","Navbar","bg","expand","Brand","href","Nav","Link","Toggle","aria-controls","App","style","flexGrow","Boolean","location","hostname","match","ReactDOM","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.eb028fa7.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { Button } from \"react-bootstrap\";\nimport { FilePicker } from \"../dxf-editor/dxf-editor\";\nimport \"./placeholder-offset.scss\";\n\n\n\nexport const PlaceholderOffsetUI: React.FC = () => {\n\n    const [kerfThickness, setKerfThickness] = useState<number>(0);\n    const [file, setFile] = useState<{ file: Buffer, fileName: string } | undefined>(undefined);\n\n    const downloadFile = async () => {\n        if (!file) {\n            alert(\"Please select a file\");\n            return;\n        }\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const { offset_drawing } = (await import(\"kerfadjusterlogic\")) as any;\n        const new_drawing = Buffer.from(offset_drawing(file, kerfThickness));\n        const new_drawing_data_uri = `data:application/dxf;base64,${new_drawing.toString(\"base64\")}`;\n\n        // sort of a hack to automatically download the newly offset dxf\n        // make an <a> element with the new DXF as a data URI\n        const download_link = document.createElement(\"a\");\n        download_link.setAttribute(\"href\", new_drawing_data_uri);\n\n        // make it download the file when opened\n        const newFileName = `${file.fileName.replace(/.dxf$/ig, \"\")}-offset.dxf`;\n        download_link.setAttribute(\"download\", newFileName);\n        download_link.innerHTML = \"Click this link to download the offset DXF\";\n\n        if (kerfThickness !== 0 || confirm(\"It looks like you wanted us to offset the DXF contours by 0 units. Was this intentional?\")) {\n            // automatically click the link to download the file\n            document.body.appendChild(download_link);\n            download_link.click();\n            document.body.removeChild(download_link);\n        }\n    };\n\n    return (\n        <div className=\"content\">\n            <p>\n                This is a web application that is supposed to kerf adjust your DXF files for the purposes of laser cutting.\n\n                This is a work in progress. Right now, it is basically unusable, and doesn&apos;t really work. The two main \n                problems are that not all geometries can be offset, and not all geometries will be offset in the right direction.\n                Regardless, you can try to put your DXF through it and you can see what comes out.\n            </p>\n            <div className=\"dxf-offset-form\">\n                <FilePicker onNewFile={(file, fileName) => setFile({ file, fileName })} />\n                <label>\n                    Amount to offset curves by:\n                    <input type=\"number\" value={kerfThickness} step=\"0.001\" onChange={(event) => setKerfThickness(Number(event.target.value))}></input>\n                </label>\n                <Button variant=\"success\" disabled={file === undefined} onClick={downloadFile}>Download offset DXF</Button>\n            </div>\n            <p>\n                Approximate feature roadmap\n                <ul>\n                    <li>Show DXF to user, and compare original version to offset version</li>\n                    <li>Testing on a variety of DXF files and entity types beyond line, circle, arc</li>\n                    <li>Explicit error messages if an entity in the DXF file is not supported</li>\n                    <li>Allow user to change whether a contour should be offset inwards or outwards</li>\n                </ul>\n            </p>\n        </div>\n    );\n};\n","import React, { ChangeEvent, FC, ReactElement, useState } from \"react\";\nimport \"./dxf-editor.scss\";\nimport { DxfDisplayArea } from \"../dxf-display-area/dxf-display-area\";\n\ninterface FilePickerProps {\n    onNewFile: (fileContents: Buffer, fileName: string) => unknown\n}\n\nexport const FilePicker: FC<FilePickerProps> = ({ onNewFile }: FilePickerProps) => {\n    const handleFileChange = async (event: ChangeEvent<HTMLInputElement>): Promise<void> => {\n        const files = event.target.files;\n        if (files && files.length > 0) {\n            const file: File = files[0];\n            const fileContents = await file.arrayBuffer();\n            const fileBuffer = Buffer.alloc(fileContents.byteLength);\n            fileBuffer.fill(new Uint8Array(fileContents));\n            onNewFile(fileBuffer, file.name);\n        } else {\n            alert(\"You have to pick a file!\");\n        }\n    };\n\n    return (\n        <label>\n            Upload a file\n            <input type=\"file\" onChange={handleFileChange} accept={\".dxf\"} />\n        </label>\n    );\n};\n\nexport const DxfEditor: FC = (): ReactElement => {\n\n    const [file, setFile] = useState<Buffer | undefined>();\n\n    return (\n        <>\n            <div className=\"selector-pane\">\n                <FilePicker onNewFile={setFile}></FilePicker>\n            </div>\n            {file ? <DxfDisplayArea fileBuffer={file} /> : <div>No File Selected</div>}\n        </>\n    );\n};\n","import React, {createRef, FC, ReactElement, RefObject, useEffect, useState} from \"react\";\nimport \"./dxf-display-area.scss\";\nimport * as THREE from \"three\";\nimport {OrbitControls} from \"three/examples/jsm/controls/OrbitControls\";\n\nclass ThreeJsObjects {\n    constructor(\n        public readonly scene: THREE.Scene,\n        public readonly camera: THREE.OrthographicCamera,\n        public readonly renderer: THREE.Renderer,\n        public readonly plane: THREE.Plane,\n        public readonly width: number,\n        public readonly height: number,\n        public readonly orbitControls: OrbitControls) {\n    }\n\n    render(): void {\n        this.renderer.render(this.scene, this.camera);\n    }\n}\n\nconst scaleFactor = 100;\n\nconst initThreeJs = (domRef: RefObject<HTMLDivElement>): ThreeJsObjects => {\n    // === THREE.JS CODE START ===\n    const plane = new THREE.Plane(new THREE.Vector3(0, 0, 1)); // xy-plane\n    const scene = new THREE.Scene();\n    const height = window.innerHeight;\n    const width = window.innerWidth;\n\n    const camera = new THREE.OrthographicCamera(-width / scaleFactor, width / scaleFactor, height / scaleFactor, -height / scaleFactor, 0.1, 1000);\n    camera.position.z = 1;\n    const renderer = new THREE.WebGLRenderer();\n    renderer.setSize(width, height);\n    if (domRef.current) {\n        domRef.current.appendChild(renderer.domElement);\n    }\n\n    const orbitControls = new OrbitControls(camera, domRef.current!);\n    orbitControls.enableRotate = false;\n    orbitControls.mouseButtons = {\n        LEFT: THREE.MOUSE.PAN,\n        MIDDLE: THREE.MOUSE.DOLLY,\n        RIGHT: THREE.MOUSE.ROTATE, // a noop\n    };\n\n\n    const ret = new ThreeJsObjects(scene, camera, renderer, plane, width, height, orbitControls);\n\n    function animate() {\n        requestAnimationFrame(animate);\n        ret.render();\n    }\n\n    animate();\n\n    return ret;\n    // === THREE.JS EXAMPLE CODE END ===\n};\n\ninterface FileViewingPaneProps {\n    fileBuffer: Buffer\n}\n\nexport const DxfDisplayArea: FC<FileViewingPaneProps> = (props): ReactElement => {\n    const paneRef = createRef<HTMLDivElement>();\n    const [threeJsObjects, setThreeJsObjects] = useState<ThreeJsObjects>();\n\n    // Initialize everything\n    useEffect(() => {\n        setThreeJsObjects(initThreeJs(paneRef));\n    }, []);\n\n\n    // Add the green box (TODO: delete)\n    useEffect(() => {\n        if (threeJsObjects) {\n            const geometry = new THREE.BoxGeometry(90, 1, 1);\n            geometry.translate(6, 3, 0);\n\n            const geometry2 = new THREE.BoxGeometry(1, 1, 1);\n            const material = new THREE.MeshBasicMaterial({color: 0x00ff00});\n            const cube = new THREE.Mesh(geometry, material);\n            threeJsObjects.scene.add(cube, new THREE.Mesh(geometry2, material));\n            threeJsObjects.render();\n        }\n    }, [threeJsObjects]);\n\n    // Fix scene when window is resized\n    useEffect(function handleResize() {\n        const width = window.innerWidth;\n        const height = window.innerHeight;\n        if (threeJsObjects) {\n            threeJsObjects.renderer.setSize(width, height);\n            threeJsObjects.camera.left = -width / scaleFactor;\n            threeJsObjects.camera.right = width / scaleFactor;\n            threeJsObjects.camera.top = height / scaleFactor;\n            threeJsObjects.camera.bottom = -height / scaleFactor;\n            threeJsObjects.camera.updateProjectionMatrix();\n        }\n        window.addEventListener(\"resize\", handleResize);\n    });\n\n    return (\n        <div\n            className=\"pane\"\n            ref={paneRef}\n        />\n    );\n};\n","import React from \"react\";\nimport { Nav } from \"react-bootstrap\";\nimport Navbar from \"react-bootstrap/Navbar\";\n\n\nexport const CustomNavbar = () => {\n    return (\n        <Navbar bg=\"light\" expand=\"lg\">\n            <Navbar.Brand href=\"#home\">Kerf Adjuster</Navbar.Brand>\n            <Nav className=\"mr-auto\">\n                <Nav.Link href=\"https://github.com/ritikmishra/kerf-adjuster\">GitHub repo</Nav.Link>\n            </Nav>\n            <Navbar.Toggle aria-controls=\"basic-navbar-nav\"/>\n        </Navbar>\n    );\n};","import React, {FC} from \"react\";\nimport \"./App.scss\";\nimport {CustomNavbar} from \"./components/navbar/navbar\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport {DxfEditor} from \"./components/dxf-editor/dxf-editor\";\nimport { PlaceholderOffsetUI } from \"./components/placeholder-offset/placeholder-offset\";\n\n\nconst App: FC = () => {\n    return (\n        <div className={\"app-root\"}>\n            <CustomNavbar/>\n            <div style={{flexGrow: 100, width: \"100%\", position: \"relative\"}}>\n                {/* <DxfEditor/> */}\n                <PlaceholderOffsetUI />\n            </div>\n        </div>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === \"localhost\" ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === \"[::1]\" ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(\n            process.env.PUBLIC_URL,\n            window.location.href\n        );\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener(\"load\", () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        \"This web app is being served cache-first by a service \" +\n                      \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === \"installed\") {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                \"New content is available and will be used when all \" +\n                            \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log(\"Content is cached for offline use.\");\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error(\"Error during service worker registration:\", error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: {\"Service-Worker\": \"script\"}\n    })\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get(\"content-type\");\n            if (\n                response.status === 404 ||\n            (contentType != null && contentType.indexOf(\"javascript\") === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                \"No internet connection found. App is running in offline mode.\"\n            );\n        });\n}\n\nexport function unregister() {\n    if (\"serviceWorker\" in navigator) {\n        navigator.serviceWorker.ready\n            .then(registration => {\n                registration.unregister();\n            })\n            .catch(error => {\n                console.error(error.message);\n            });\n    }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./app/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}